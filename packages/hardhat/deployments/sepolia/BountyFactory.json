{
  "address": "0xa972f4a44fe8e189a5d5472f995b584142078673",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bountyAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "cid",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "BountyCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_cid",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_stakeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "createBounty",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "deployedBounties",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDeployedBounties",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "contractName": "BountyFactory",
  "sourceName": "contracts/BountyFactory.sol",
  "bytecode": "",
  "deployedBytecode": "0x608060405260043610610033575f3560e01c80639d3a400a14610037578063a0bf29fa14610061578063be5a4a3d14610098575b5f80fd5b348015610042575f80fd5b5061004b6100ab565b6040516100589190610216565b60405180910390f35b34801561006c575f80fd5b5061008061007b366004610262565b61010a565b6040516001600160a01b039091168152602001610058565b6100806100a636600461028d565b610131565b60605f80548060200260200160405190810160405280929190818152602001828054801561010057602002820191905f5260205f20905b81546001600160a01b031681526001909101906020018083116100e2575b5050505050905090565b5f8181548110610118575f80fd5b5f918252602090912001546001600160a01b0316905081565b5f80348686868660405161014490610209565b61015194939291906103a8565b6040518091039082f090508015801561016c573d5f803e3d5ffd5b505f80546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319166001600160a01b038381169182179092556040519293508392918916917f3ee8d765084632a9a3eade7d9c8055aef46516026e5c0309be50e9e7c56d725e906101f7908a9034908b908b906103de565b60405180910390a39695505050505050565b61223b8061040d83390190565b602080825282518282018190525f9190848201906040850190845b818110156102565783516001600160a01b031683529284019291840191600101610231565b50909695505050505050565b5f60208284031215610272575f80fd5b5035919050565b634e487b7160e01b5f52604160045260245ffd5b5f805f80608085870312156102a0575f80fd5b84356001600160a01b03811681146102b6575f80fd5b9350602085013567ffffffffffffffff808211156102d2575f80fd5b818701915087601f8301126102e5575f80fd5b8135818111156102f7576102f7610279565b604051601f8201601f19908116603f0116810190838211818310171561031f5761031f610279565b816040528281528a6020848701011115610337575f80fd5b826020860160208301375f928101602001929092525095989597505050506040840135936060013592915050565b5f81518084525f5b818110156103895760208185018101518683018201520161036d565b505f602082860101526020601f19601f83011685010191505092915050565b6001600160a01b03851681526080602082018190525f906103cb90830186610365565b6040830194909452506060015292915050565b608081525f6103f06080830187610365565b602083019590955250604081019290925260609091015291905056fe60c06040526040516200223b3803806200223b833981016040819052620000269162000192565b5f34116200007b5760405162461bcd60e51b815260206004820152601c60248201527f426f756e747920616d6f756e742063616e6e6f74206265207a65726f0000000060448201526064015b60405180910390fd5b5f8211620000cc5760405162461bcd60e51b815260206004820152601860248201527f5374616b6520616d6f756e74206d757374206265203e20300000000000000000604482015260640162000072565b5f81116200011d5760405162461bcd60e51b815260206004820152601460248201527f4475726174696f6e206d757374206265203e2030000000000000000000000000604482015260640162000072565b5f80546001600160a01b0319166001600160a01b03861617905560026200014584826200031b565b50346001556003805460ff191690556080829052620001658142620003e3565b60a05250506003805461ff001916905550620004099050565b634e487b7160e01b5f52604160045260245ffd5b5f805f8060808587031215620001a6575f80fd5b84516001600160a01b0381168114620001bd575f80fd5b602086810151919550906001600160401b0380821115620001dc575f80fd5b818801915088601f830112620001f0575f80fd5b8151818111156200020557620002056200017e565b604051601f8201601f19908116603f011681019083821181831017156200023057620002306200017e565b816040528281528b8684870101111562000248575f80fd5b5f93505b828410156200026b57848401860151818501870152928501926200024c565b5f928101909501919091525050506040860151606090960151949790965092505050565b600181811c90821680620002a457607f821691505b602082108103620002c357634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111562000316575f81815260208120601f850160051c81016020861015620002f15750805b601f850160051c820191505b818110156200031257828155600101620002fd565b5050505b505050565b81516001600160401b038111156200033757620003376200017e565b6200034f816200034884546200028f565b84620002c9565b602080601f83116001811462000385575f84156200036d5750858301515b5f19600386901b1c1916600185901b17855562000312565b5f85815260208120601f198616915b82811015620003b55788860151825594840194600190910190840162000394565b5085821015620003d357878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b808201808211156200040357634e487b7160e01b5f52601160045260245ffd5b92915050565b60805160a051611dfb620004405f395f818161019d01528181610bca0152610e5301525f81816102210152610c310152611dfb5ff3fe6080604052600436106100fa575f3560e01c8063615c12ba11610092578063a8ec83c511610062578063a8ec83c5146102d9578063aa3ec0a9146102ed578063aa8c217c1461030e578063ae4dac4114610323578063d7dd27ea14610344575f80fd5b8063615c12ba14610243578063635ac1ed1461026257806376551df7146102755780638da5cb5b146102a3575f80fd5b80633197cbb6116100cd5780633197cbb61461018c57806340bc7fa2146101cd57806343d726d6146101fc57806360c7dc4714610210575f80fd5b80630f7517b0146100fe57806319b006d51461011f578063200d2ed21461013e5780632a7c02041461016d575b5f80fd5b348015610109575f80fd5b5061011d6101183660046116aa565b610363565b005b34801561012a575f80fd5b5061011d6101393660046116eb565b610416565b348015610149575f80fd5b506003546101579060ff1681565b604051610164919061172b565b60405180910390f35b348015610178575f80fd5b5061011d6101873660046116eb565b6105c6565b348015610197575f80fd5b506101bf7f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610164565b3480156101d8575f80fd5b506101ec6101e73660046116eb565b6107c6565b6040516101649493929190611781565b348015610207575f80fd5b5061011d61089c565b34801561021b575f80fd5b506101bf7f000000000000000000000000000000000000000000000000000000000000000081565b34801561024e575f80fd5b5061011d61025d36600461180e565b610942565b61011d610270366004611871565b610b58565b348015610280575f80fd5b5060035461029390610100900460ff1681565b6040519015158152602001610164565b3480156102ae575f80fd5b505f546102c1906001600160a01b031681565b6040516001600160a01b039091168152602001610164565b3480156102e4575f80fd5b5061011d610dfb565b3480156102f8575f80fd5b50610301610eb3565b604051610164919061191c565b348015610319575f80fd5b506101bf60015481565b34801561032e575f80fd5b50610337610f3f565b604051610164919061192e565b34801561034f575f80fd5b5061011d61035e36600461197a565b610f9f565b5f546001600160a01b031633146103ae5760405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b60448201526064015b60405180910390fd5b5f60035460ff1660018111156103c6576103c6611704565b146103fc5760405162461bcd60e51b815260206004820152600660248201526510db1bdcd95960d21b60448201526064016103a5565b600380549115156101000261ff0019909216919091179055565b5f546001600160a01b0316331461046f5760405162461bcd60e51b815260206004820152601c60248201527f4f6e6c7920626f756e7479206f776e65722063616e2072656a6563740000000060448201526064016103a5565b5f60035460ff16600181111561048757610487611704565b146104a45760405162461bcd60e51b81526004016103a5906119dc565b6001600160a01b0381165f9081526004602052604090206001600282015460ff1660048111156104d6576104d6611704565b146104f35760405162461bcd60e51b81526004016103a590611a05565b60028101805460ff191660031790556001810180545f909155801561058e575f80546040516001600160a01b039091169183156108fc02918491818181858888f19350505050158015610548573d5f803e3d5ffd5b505f546040518281526001600160a01b03918216918516907f99c2ad56961cb3daf3b2b5a5a6c65dc490d85f92aa5a3974aa5e42ad715574b49060200160405180910390a35b6040516001600160a01b038416907fa9da90ee71c4b5d30cc3c6876bb706f0d79be3409691c4c4ca3eddf55cd956c9905f90a2505050565b5f546001600160a01b0316331461061f5760405162461bcd60e51b815260206004820152601c60248201527f4f6e6c7920626f756e7479206f776e65722063616e206163636570740000000060448201526064016103a5565b5f60035460ff16600181111561063757610637611704565b146106545760405162461bcd60e51b81526004016103a5906119dc565b6001600160a01b0381165f9081526004602052604090206001600282015460ff16600481111561068657610686611704565b146106e35760405162461bcd60e51b815260206004820152602760248201527f4e6f2070656e64696e67207375626d697373696f6e2066726f6d2074686973206044820152666164647265737360c81b60648201526084016103a5565b6002818101805460ff191690911790556001810180545f909155801561077f575f80546040516001600160a01b039091169183156108fc02918491818181858888f19350505050158015610739573d5f803e3d5ffd5b505f546040518281526001600160a01b03918216918516907f99c2ad56961cb3daf3b2b5a5a6c65dc490d85f92aa5a3974aa5e42ad715574b49060200160405180910390a35b6003805461ff0019166101001790556040516001600160a01b038416907fccab1be738aee5ee7f8733e18562d55c2a8c96b4deacc429ecc0c660e1bbeaa7905f90a2505050565b6001600160a01b0381165f90815260046020526040812060018101546002820154825460609493849384939192839260ff808216926101009092041690849061080e90611a51565b80601f016020809104026020016040519081016040528092919081815260200182805461083a90611a51565b80156108855780601f1061085c57610100808354040283529160200191610885565b820191905f5260205f20905b81548152906001019060200180831161086857829003601f168201915b505050505093509450945094509450509193509193565b5f546001600160a01b031633146108e25760405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b60448201526064016103a5565b5f60035460ff1660018111156108fa576108fa611704565b146109385760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e4818db1bdcd95960921b60448201526064016103a5565b6109406111ad565b565b5f546001600160a01b0316331461099b5760405162461bcd60e51b815260206004820152601c60248201527f4f6e6c7920626f756e7479206f776e65722063616e2072656a6563740000000060448201526064016103a5565b5f60035460ff1660018111156109b3576109b3611704565b146109d05760405162461bcd60e51b81526004016103a5906119dc565b6001600160a01b0383165f9081526004602052604090206001600282015460ff166004811115610a0257610a02611704565b14610a1f5760405162461bcd60e51b81526004016103a590611a05565b60028101805460ff1916600317905580610a3a838583611ad7565b5060028101805461ff0019166101001790556001810180545f9091558015610ad8575f80546040516001600160a01b039091169183156108fc02918491818181858888f19350505050158015610a92573d5f803e3d5ffd5b505f546040518281526001600160a01b03918216918716907f99c2ad56961cb3daf3b2b5a5a6c65dc490d85f92aa5a3974aa5e42ad715574b49060200160405180910390a35b6040516001600160a01b038616907fa9da90ee71c4b5d30cc3c6876bb706f0d79be3409691c4c4ca3eddf55cd956c9905f90a2846001600160a01b03167fc5284f1a134ac0536775589139e1ae359fb1d6ea6ac81ca86daa02214867f9bb60018686604051610b4993929190611b93565b60405180910390a25050505050565b5f60035460ff166001811115610b7057610b70611704565b14610bc85760405162461bcd60e51b815260206004820152602260248201527f426f756e7479206973206e6f74206f70656e20666f72207375626d697373696f6044820152616e7360f01b60648201526084016103a5565b7f00000000000000000000000000000000000000000000000000000000000000004210610c2f5760405162461bcd60e51b8152602060048201526015602482015274109bdd5b9d1e48191d5c985d1a5bdb88195b991959605a1b60448201526064016103a5565b7f00000000000000000000000000000000000000000000000000000000000000003414610c9e5760405162461bcd60e51b815260206004820152601d60248201527f5374616b65206d75737420657175616c20666978656420616d6f756e7400000060448201526064016103a5565b335f90815260046020526040812090600282015460ff166004811115610cc657610cc6611704565b14610d1e5760405162461bcd60e51b815260206004820152602260248201527f416c7265616479207375626d69747465642066726f6d20746869732077616c6c604482015261195d60f21b60648201526084016103a5565b80610d298382611bd1565b5034600182810182905560028301805461ffff1916821790556005805491820181555f527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b03191633908117909155604051918252907f0a7bb2e28cc4698aac06db79cf9163bfcc20719286cf59fa7d492ceda1b8edc29060200160405180910390a2336001600160a01b03167f7a5abc33394d749a1c60ce992e97bc96515f7fcc173ea0908de4c36fa73df8a583604051610def919061191c565b60405180910390a25050565b5f60035460ff166001811115610e1357610e13611704565b14610e515760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e4818db1bdcd95960921b60448201526064016103a5565b7f00000000000000000000000000000000000000000000000000000000000000004210156109385760405162461bcd60e51b815260206004820152600f60248201526e139bdd081e595d08195e1c1a5c9959608a1b60448201526064016103a5565b60028054610ec090611a51565b80601f0160208091040260200160405190810160405280929190818152602001828054610eec90611a51565b8015610f375780601f10610f0e57610100808354040283529160200191610f37565b820191905f5260205f20905b815481529060010190602001808311610f1a57829003601f168201915b505050505081565b60606005805480602002602001604051908101604052809291908181526020018280548015610f9557602002820191905f5260205f20905b81546001600160a01b03168152600190910190602001808311610f77575b5050505050905090565b6001600160a01b0384165f90815260046020526040812090600282015460ff166004811115610fd057610fd0611704565b0361100d5760405162461bcd60e51b815260206004820152600d60248201526c27379039bab136b4b9b9b4b7b760991b60448201526064016103a5565b5f54336001600160a01b03918216811491871614818061102a5750805b6110645760405162461bcd60e51b815260206004820152600b60248201526a139bdd08185b1b1bddd95960aa1b60448201526064016103a5565b801561112a576001600284015460ff16600481111561108557611085611704565b036110d25760405162461bcd60e51b815260206004820152601960248201527f4e6f7420616c6c6f776564207768696c652050656e64696e670000000000000060448201526064016103a5565b600354610100900460ff161561112a5760405162461bcd60e51b815260206004820152601c60248201527f4f776e657220666978696e673b2063616e6e6f74207075626c6973680000000060448201526064016103a5565b82611136858783611ad7565b5060028301805487919061ff00191661010083600181111561115a5761115a611704565b0217905550866001600160a01b03167fc5284f1a134ac0536775589139e1ae359fb1d6ea6ac81ca86daa02214867f9bb87878760405161119c93929190611b93565b60405180910390a250505050505050565b6003805460ff191660011790555f805b600554811015611243575f60045f600584815481106111de576111de611c8d565b5f9182526020808320909101546001600160a01b031683528201929092526040019020905060028082015460ff16600481111561121d5761121d611704565b03611230578261122c81611cb5565b9350505b508061123b81611cb5565b9150506111bd565b505f808211801561125557505f600154115b156113a7575f826001546112699190611ccd565b90505f6112768483611cec565b6001546112839190611d09565b90505f5b60055481101561135d575f60045f600584815481106112a8576112a8611c8d565b5f9182526020808320909101546001600160a01b031683528201929092526040019020905060028082015460ff1660048111156112e7576112e7611704565b0361134a57600582815481106112ff576112ff611c8d565b5f9182526020822001546040516001600160a01b039091169186156108fc02918791818181858888f1935050505015801561133c573d5f803e3d5ffd5b506113478486611d1c565b94505b508061135581611cb5565b915050611287565b50801561139c575f80546040516001600160a01b039091169183156108fc02918491818181858888f1935050505015801561139a573d5f803e3d5ffd5b505b50505f6001556113f9565b811580156113b657505f600154115b156113f9575f80546001546040516001600160a01b039092169281156108fc029290818181858888f193505050501580156113f3573d5f803e3d5ffd5b505f6001555b5f5b600554811015611543575f60045f6005848154811061141c5761141c611c8d565b5f9182526020808320909101546001600160a01b03168352820192909252604001902090506001600282015460ff16600481111561145c5761145c611704565b03611530576001810180545f90915560028201805460ff19166004179055801561152e576005838154811061149357611493611c8d565b5f9182526020822001546040516001600160a01b039091169183156108fc02918491818181858888f193505050501580156114d0573d5f803e3d5ffd5b50600583815481106114e4576114e4611c8d565b5f91825260209182902001546040518381526001600160a01b03909116917ff247ed1040aa5b17569282cc01923fbdd01401fa63e12930d59be4a5e87aa7d6910160405180910390a25b505b508061153b81611cb5565b9150506113fb565b505f5b600554811015611661575f60045f6005848154811061156757611567611c8d565b5f9182526020808320909101546001600160a01b031683528201929092526040019020905060028082015460ff1660048111156115a6576115a6611704565b1480156115d1575060016002820154610100900460ff1660018111156115ce576115ce611704565b14155b1561164e5760028101805461ff00191661010017905560058054839081106115fb576115fb611c8d565b5f918252602090912001546040516001600160a01b03909116907fc5284f1a134ac0536775589139e1ae359fb1d6ea6ac81ca86daa02214867f9bb90611645906001908590611d2f565b60405180910390a25b508061165981611cb5565b915050611546565b506003805461ff001916905560408051838152602081018390527fe44903a04328507d74e4709cbebc6c819f9f1cd0b7cb171ba22814fcc18ecf38910160405180910390a15050565b5f602082840312156116ba575f80fd5b813580151581146116c9575f80fd5b9392505050565b80356001600160a01b03811681146116e6575f80fd5b919050565b5f602082840312156116fb575f80fd5b6116c9826116d0565b634e487b7160e01b5f52602160045260245ffd5b6002811061172857611728611704565b50565b6020810161173883611718565b91905290565b5f81518084525f5b8181101561176257602081850181015186830182015201611746565b505f602082860101526020601f19601f83011685010191505092915050565b608081525f611793608083018761173e565b9050846020830152600584106117ab576117ab611704565b8360408301526117ba83611718565b82606083015295945050505050565b5f8083601f8401126117d9575f80fd5b50813567ffffffffffffffff8111156117f0575f80fd5b602083019150836020828501011115611807575f80fd5b9250929050565b5f805f60408486031215611820575f80fd5b611829846116d0565b9250602084013567ffffffffffffffff811115611844575f80fd5b611850868287016117c9565b9497909650939450505050565b634e487b7160e01b5f52604160045260245ffd5b5f60208284031215611881575f80fd5b813567ffffffffffffffff80821115611898575f80fd5b818401915084601f8301126118ab575f80fd5b8135818111156118bd576118bd61185d565b604051601f8201601f19908116603f011681019083821181831017156118e5576118e561185d565b816040528281528760208487010111156118fd575f80fd5b826020860160208301375f928101602001929092525095945050505050565b602081525f6116c9602083018461173e565b602080825282518282018190525f9190848201906040850190845b8181101561196e5783516001600160a01b031683529284019291840191600101611949565b50909695505050505050565b5f805f806060858703121561198d575f80fd5b611996856116d0565b93506020850135600281106119a9575f80fd5b9250604085013567ffffffffffffffff8111156119c4575f80fd5b6119d0878288016117c9565b95989497509550505050565b6020808252600f908201526e2137bab73a3c903737ba1037b832b760891b604082015260600190565b6020808252602c908201527f4e6f207375626d697373696f6e20746f2072656a656374206f7220616c72656160408201526b191e481c1c9bd8d95cdcd95960a21b606082015260800190565b600181811c90821680611a6557607f821691505b602082108103611a8357634e487b7160e01b5f52602260045260245ffd5b50919050565b601f821115611ad2575f81815260208120601f850160051c81016020861015611aaf5750805b601f850160051c820191505b81811015611ace57828155600101611abb565b5050505b505050565b67ffffffffffffffff831115611aef57611aef61185d565b611b0383611afd8354611a51565b83611a89565b5f601f841160018114611b34575f8515611b1d5750838201355b5f19600387901b1c1916600186901b178355611b8c565b5f83815260209020601f19861690835b82811015611b645786850135825560209485019460019092019101611b44565b5086821015611b80575f1960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b611b9c84611718565b83815260406020820152816040820152818360608301375f818301606090810191909152601f909201601f1916010192915050565b815167ffffffffffffffff811115611beb57611beb61185d565b611bff81611bf98454611a51565b84611a89565b602080601f831160018114611c32575f8415611c1b5750858301515b5f19600386901b1c1916600185901b178555611ace565b5f85815260208120601f198616915b82811015611c6057888601518255948401946001909101908401611c41565b5085821015611c7d57878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b5f60018201611cc657611cc6611ca1565b5060010190565b5f82611ce757634e487b7160e01b5f52601260045260245ffd5b500490565b8082028115828204841417611d0357611d03611ca1565b92915050565b81810381811115611d0357611d03611ca1565b80820180821115611d0357611d03611ca1565b611d3883611718565b8281525f60206040818401525f8454611d5081611a51565b806040870152606060018084165f8114611d715760018114611d8b57611db6565b60ff1985168984015283151560051b890183019550611db6565b895f52865f205f5b85811015611dae5781548b8201860152908301908801611d93565b8a0184019650505b5093999850505050505050505056fea26469706673582212202bc46d5e807147d4914989a7ee10f38b3099e84f9c844fc61431126e52330dd264736f6c63430008140033a2646970667358221220c1830b32aea2c7357835fc629b27f99ece9a9733bfc286904403a25c7109c1ea64736f6c63430008140033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "immutableReferences": {},
  "inputSourceName": "project/contracts/BountyFactory.sol",
  "devdoc": {
    "details": "A factory contract to create and deploy new Bounty contracts.",
    "kind": "dev",
    "methods": {
      "createBounty(address,string,uint256,uint256)": {
        "details": "Creates and deploys a new Bounty contract, funding it with the sent ETH.",
        "params": {
          "_cid": "The IPFS CID for the bounty's metadata.",
          "_owner": "The address that will own the new bounty."
        },
        "returns": {
          "_0": "The address of the newly created Bounty contract."
        }
      },
      "getDeployedBounties()": {
        "details": "Returns a list of all bounty contract addresses created by this factory."
      }
    },
    "title": "BountyFactory",
    "version": 1
  },
  "evm": {
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "1970600",
        "executionCost": "2082",
        "totalCost": "1972682"
      },
      "external": {
        "createBounty(address,string,uint256,uint256)": "infinite",
        "deployedBounties(uint256)": "4610",
        "getDeployedBounties()": "infinite"
      }
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bountyAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"BountyCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_cid\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createBounty\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deployedBounties\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeployedBounties\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A factory contract to create and deploy new Bounty contracts.\",\"kind\":\"dev\",\"methods\":{\"createBounty(address,string,uint256,uint256)\":{\"details\":\"Creates and deploys a new Bounty contract, funding it with the sent ETH.\",\"params\":{\"_cid\":\"The IPFS CID for the bounty's metadata.\",\"_owner\":\"The address that will own the new bounty.\"},\"returns\":{\"_0\":\"The address of the newly created Bounty contract.\"}},\"getDeployedBounties()\":{\"details\":\"Returns a list of all bounty contract addresses created by this factory.\"}},\"title\":\"BountyFactory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project/contracts/BountyFactory.sol\":\"BountyFactory\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"project/contracts/Bounty.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title Bounty\\n * @dev A contract representing a single bug bounty with a locked amount of ETH.\\n */\\ncontract Bounty {\\n    // Bounty-level status: only Open or Closed\\n    enum Status {\\n        Open,\\n        Closed\\n    }\\n\\n    // Per-submission status\\n    enum SubmissionState {\\n        None,\\n        Pending,\\n        Accepted,\\n        Rejected,\\n        Refunded\\n    }\\n\\n    // Visibility for submissions\\n    enum Visibility {\\n        Private, // encrypted CID (off-chain decryption)\\n        Public   // plaintext CID (public)\\n    }\\n\\n    address public owner;\\n    uint256 public amount;\\n    string public cid; // IPFS CID for bounty details (title, description, severity)\\n    Status public status;\\n    uint256 public immutable stakeAmount; // fixed stake decided by the bounty creator, immutable\\n    uint256 public immutable endTime; // timestamp when bounty closes automatically\\n    bool public fixInProgress; // true when owner is working on a fix\\n    // No platform treasury. All monetary flows remain between the bounty contract and researchers.\\n\\n    struct Submission {\\n        string reportCid;\\n        uint256 stake;\\n        SubmissionState state;\\n        Visibility visibility; // 0=Private, 1=Public\\n    }\\n\\n    mapping(address => Submission) private _submissions; // per-wallet single submission\\n    address[] private _submitters;\\n\\n    event ReportSubmitted(address indexed researcher, string reportCid);\\n    event SubmissionAccepted(address indexed researcher);\\n    event SubmissionRejected(address indexed researcher);\\n    event FundsReleased(address indexed researcher, uint256 amount);\\n    event StakeDeposited(address indexed researcher, uint256 amount);\\n    event StakeRefunded(address indexed researcher, uint256 amount);\\n    event StakeSlashed(address indexed researcher, uint256 amount, address indexed receiver);\\n    event BountyClosed(uint256 winners, uint256 totalPaid);\\n    event SubmissionVisibilityChanged(address indexed researcher, Visibility visibility, string cid);\\n\\n    constructor(address _owner, string memory _cid, uint256 _stakeAmount, uint256 _duration) payable {\\n        require(msg.value > 0, \\\"Bounty amount cannot be zero\\\");\\n        require(_stakeAmount > 0, \\\"Stake amount must be > 0\\\");\\n        require(_duration > 0, \\\"Duration must be > 0\\\");\\n        owner = _owner;\\n        cid = _cid;\\n        amount = msg.value;\\n        status = Status.Open;\\n        stakeAmount = _stakeAmount;\\n        endTime = block.timestamp + _duration;\\n        fixInProgress = false;\\n    }\\n\\n    /**\\n     * @dev Allows any address to submit a report for an open bounty.\\n     * @param _reportCid The IPFS CID of the vulnerability report.\\n     */\\n    function submitReport(string memory _reportCid) external payable {\\n        require(status == Status.Open, \\\"Bounty is not open for submissions\\\");\\n        require(block.timestamp < endTime, \\\"Bounty duration ended\\\");\\n        require(msg.value == stakeAmount, \\\"Stake must equal fixed amount\\\");\\n        Submission storage subm = _submissions[msg.sender];\\n        require(subm.state == SubmissionState.None, \\\"Already submitted from this wallet\\\");\\n\\n        subm.reportCid = _reportCid;\\n        subm.stake = msg.value;\\n        subm.state = SubmissionState.Pending;\\n        subm.visibility = Visibility.Private; // default to Private\\n        _submitters.push(msg.sender);\\n\\n        emit StakeDeposited(msg.sender, msg.value);\\n        emit ReportSubmitted(msg.sender, _reportCid);\\n    }\\n\\n    /**\\n     * @dev Allows the bounty owner to approve a submission and release funds.\\n     */\\n    function acceptSubmission(address _researcher) external {\\n        require(msg.sender == owner, \\\"Only bounty owner can accept\\\");\\n        require(status == Status.Open, \\\"Bounty not open\\\");\\n        Submission storage subm = _submissions[_researcher];\\n        require(subm.state == SubmissionState.Pending, \\\"No pending submission from this address\\\");\\n\\n        // Mark accepted and slash stake back to bounty creator (anti-spam)\\n        subm.state = SubmissionState.Accepted;\\n        uint256 _stake = subm.stake;\\n        subm.stake = 0;\\n        if (_stake > 0) {\\n            payable(owner).transfer(_stake);\\n            emit StakeSlashed(_researcher, _stake, owner);\\n        }\\n        fixInProgress = true; // owner working on fix once any submission is accepted\\n        emit SubmissionAccepted(_researcher);\\n    }\\n\\n    /**\\n     * @dev Allows the bounty owner to reject a submission.\\n     */\\n    function rejectSubmission(address _researcher) external {\\n        require(msg.sender == owner, \\\"Only bounty owner can reject\\\");\\n        require(status == Status.Open, \\\"Bounty not open\\\");\\n        Submission storage subm = _submissions[_researcher];\\n        require(subm.state == SubmissionState.Pending, \\\"No submission to reject or already processed\\\");\\n\\n        subm.state = SubmissionState.Rejected;\\n        uint256 _stake = subm.stake;\\n        subm.stake = 0;\\n        // Slash the researcher's stake back to bounty creator (anti-spam)\\n        if (_stake > 0) {\\n            payable(owner).transfer(_stake);\\n            emit StakeSlashed(_researcher, _stake, owner);\\n        }\\n        emit SubmissionRejected(_researcher);\\n    }\\n\\n    /**\\n     * @dev Owner can toggle fixInProgress flag while bounty is open.\\n     */\\n    function setFixInProgress(bool _inProgress) external {\\n        require(msg.sender == owner, \\\"Only owner\\\");\\n        require(status == Status.Open, \\\"Closed\\\");\\n        fixInProgress = _inProgress;\\n    }\\n\\n    /**\\n     * @dev Allows owner to close the bounty at any time. Distributes rewards and refunds stakes.\\n     */\\n    function close() external {\\n        require(msg.sender == owner, \\\"Only owner\\\");\\n        require(status == Status.Open, \\\"Already closed\\\");\\n        _closeAndSettle();\\n    }\\n\\n    /**\\n     * @dev Allows anyone to close after the duration has passed.\\n     */\\n    function closeIfExpired() external {\\n        require(status == Status.Open, \\\"Already closed\\\");\\n        require(block.timestamp >= endTime, \\\"Not yet expired\\\");\\n        _closeAndSettle();\\n    }\\n\\n    function _closeAndSettle() internal {\\n        status = Status.Closed;\\n\\n        // Count winners\\n        uint256 winners = 0;\\n        for (uint256 i = 0; i < _submitters.length; i++) {\\n            Submission storage s = _submissions[_submitters[i]];\\n            if (s.state == SubmissionState.Accepted) {\\n                winners++;\\n            }\\n        }\\n\\n        uint256 totalPaid = 0;\\n        if (winners > 0 && amount > 0) {\\n            uint256 share = amount / winners;\\n            uint256 remainder = amount - (share * winners);\\n            for (uint256 i = 0; i < _submitters.length; i++) {\\n                Submission storage s = _submissions[_submitters[i]];\\n                if (s.state == SubmissionState.Accepted) {\\n                    payable(_submitters[i]).transfer(share);\\n                    totalPaid += share;\\n                }\\n            }\\n            if (remainder > 0) {\\n                // send dust back to creator\\n                payable(owner).transfer(remainder);\\n                // not counted as totalPaid (only winners' payouts)\\n            }\\n            amount = 0;\\n        } else if (winners == 0 && amount > 0) {\\n            // No winners: return bounty to creator\\n            payable(owner).transfer(amount);\\n            amount = 0;\\n        }\\n\\n        // Refund stakes for untouched submissions (Pending -> Refunded)\\n        for (uint256 i = 0; i < _submitters.length; i++) {\\n            Submission storage s2 = _submissions[_submitters[i]];\\n            if (s2.state == SubmissionState.Pending) {\\n                uint256 st = s2.stake;\\n                s2.stake = 0;\\n                s2.state = SubmissionState.Refunded;\\n                if (st > 0) {\\n                    payable(_submitters[i]).transfer(st);\\n                    emit StakeRefunded(_submitters[i], st);\\n                }\\n            }\\n        }\\n\\n        // After closure: Make all Accepted reports public (do not change Pending; Rejected already public via rejectAndPublish)\\n        for (uint256 i = 0; i < _submitters.length; i++) {\\n            Submission storage s3 = _submissions[_submitters[i]];\\n            if (s3.state == SubmissionState.Accepted && s3.visibility != Visibility.Public) {\\n                s3.visibility = Visibility.Public;\\n                emit SubmissionVisibilityChanged(_submitters[i], Visibility.Public, s3.reportCid);\\n            }\\n        }\\n\\n        fixInProgress = false; // done fixing after closure\\n        emit BountyClosed(winners, totalPaid);\\n    }\\n\\n    /**\\n     * @dev Update a submission's visibility and CID.\\n     * Only bounty owner or the submission's researcher can call it.\\n     * Researcher cannot publish while Pending or while owner is fixing.\\n     */\\n    function setSubmissionVisibility(address _researcher, Visibility _visibility, string calldata _newCid) external {\\n        Submission storage subm = _submissions[_researcher];\\n        require(subm.state != SubmissionState.None, \\\"No submission\\\");\\n\\n        bool isOwner = msg.sender == owner;\\n        bool isResearcher = msg.sender == _researcher;\\n        require(isOwner || isResearcher, \\\"Not allowed\\\");\\n\\n        if (isResearcher) {\\n            require(subm.state != SubmissionState.Pending, \\\"Not allowed while Pending\\\");\\n            require(!fixInProgress, \\\"Owner fixing; cannot publish\\\");\\n        }\\n\\n        subm.reportCid = _newCid;\\n        subm.visibility = _visibility;\\n        emit SubmissionVisibilityChanged(_researcher, _visibility, _newCid);\\n    }\\n\\n    /**\\n     * @dev Reject a submission and atomically set its visibility to Public with provided plaintext CID.\\n     */\\n    function rejectAndPublish(address _researcher, string calldata _publicCid) external {\\n        require(msg.sender == owner, \\\"Only bounty owner can reject\\\");\\n        require(status == Status.Open, \\\"Bounty not open\\\");\\n        Submission storage subm = _submissions[_researcher];\\n        require(subm.state == SubmissionState.Pending, \\\"No submission to reject or already processed\\\");\\n\\n        // Set state and publish\\n        subm.state = SubmissionState.Rejected;\\n        subm.reportCid = _publicCid;\\n        subm.visibility = Visibility.Public;\\n\\n        uint256 _stake = subm.stake;\\n        subm.stake = 0;\\n        // Slash the researcher's stake back to bounty creator (anti-spam)\\n        if (_stake > 0) {\\n            payable(owner).transfer(_stake);\\n            emit StakeSlashed(_researcher, _stake, owner);\\n        }\\n        emit SubmissionRejected(_researcher);\\n        emit SubmissionVisibilityChanged(_researcher, Visibility.Public, _publicCid);\\n    }\\n\\n    /**\\n     * @dev Returns the list of submitter addresses.\\n     */\\n    function getSubmitters() external view returns (address[] memory) {\\n        return _submitters;\\n    }\\n\\n    /**\\n     * @dev Returns a submission details for a given researcher.\\n     */\\n    function getSubmission(address _researcher) external view returns (string memory, uint256, SubmissionState, Visibility) {\\n        Submission storage s = _submissions[_researcher];\\n        return (s.reportCid, s.stake, s.state, s.visibility);\\n    }\\n}\\n\",\"keccak256\":\"0x1b2ca6c823f68f54685f3fb736e25f6a61373f3b5a4fe7f1bfd0ac68f6ec004c\",\"license\":\"MIT\"},\"project/contracts/BountyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./Bounty.sol\\\";\\n\\n/**\\n * @title BountyFactory\\n * @dev A factory contract to create and deploy new Bounty contracts.\\n */\\ncontract BountyFactory {\\n    address[] public deployedBounties;\\n\\n    event BountyCreated(\\n        address indexed bountyAddress,\\n        address indexed owner,\\n        string cid,\\n        uint256 amount,\\n        uint256 stakeAmount,\\n        uint256 duration\\n    );\\n\\n    constructor() {}\\n\\n    /**\\n     * @dev Creates and deploys a new Bounty contract, funding it with the sent ETH.\\n     * @param _owner The address that will own the new bounty.\\n     * @param _cid The IPFS CID for the bounty's metadata.\\n     * @return The address of the newly created Bounty contract.\\n     */\\n    function createBounty(\\n        address _owner,\\n        string memory _cid,\\n        uint256 _stakeAmount,\\n        uint256 _duration\\n    ) external payable returns (address) {\\n        // Forward ETH to new bounty as reward pool\\n        Bounty newBounty = new Bounty{ value: msg.value }(_owner, _cid, _stakeAmount, _duration);\\n\\n        address newBountyAddress = address(newBounty);\\n        deployedBounties.push(newBountyAddress);\\n\\n        emit BountyCreated(newBountyAddress, _owner, _cid, msg.value, _stakeAmount, _duration);\\n        return newBountyAddress;\\n    }\\n\\n    /**\\n     * @dev Returns a list of all bounty contract addresses created by this factory.\\n     */\\n    function getDeployedBounties() external view returns (address[] memory) {\\n        return deployedBounties;\\n    }\\n}\\n\",\"keccak256\":\"0x4c9753effd539834d253207b3890310379ef2af6adfa9d497ca0cc10eec6e78b\",\"license\":\"MIT\"}},\"version\":1}",
  "storageLayout": {
    "storage": [
      {
        "astId": 1027,
        "contract": "project/contracts/BountyFactory.sol:BountyFactory",
        "label": "deployedBounties",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      }
    }
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "argsData": "0x",
  "transaction": {
    "hash": "0x9c6bd6e60a07f89d7800b10b0b5f4acc0f29bfdaa55c01fa8423995ecd24f82f",
    "nonce": "0x5",
    "origin": "0x43a5b8825ceaaca52436f4da10713dbbec7f5cc3"
  },
  "receipt": {
    "blockHash": "0x2dc57c7ac2768eedcaf4b716c2fc89c4699f4b81ff5460065388b5d134eb8da6",
    "blockNumber": "0x90c38f",
    "transactionIndex": "0x1a"
  }
}