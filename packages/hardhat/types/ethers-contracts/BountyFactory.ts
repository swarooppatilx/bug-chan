/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  

  export interface BountyFactoryInterface extends Interface {
    getFunction(nameOrSignature: "createBounty" | "deployedBounties" | "getDeployedBounties" | "platformTreasury"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "BountyCreated"): EventFragment;

    encodeFunctionData(functionFragment: 'createBounty', values: [AddressLike, string, BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'deployedBounties', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getDeployedBounties', values?: undefined): string;
encodeFunctionData(functionFragment: 'platformTreasury', values?: undefined): string;

    decodeFunctionResult(functionFragment: 'createBounty', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'deployedBounties', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getDeployedBounties', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'platformTreasury', data: BytesLike): Result;
  }

  
    export namespace BountyCreatedEvent {
      export type InputTuple = [bountyAddress: AddressLike, owner: AddressLike, cid: string, amount: BigNumberish, stakeAmount: BigNumberish, duration: BigNumberish];
      export type OutputTuple = [bountyAddress: string, owner: string, cid: string, amount: bigint, stakeAmount: bigint, duration: bigint];
      export interface OutputObject {bountyAddress: string, owner: string, cid: string, amount: bigint, stakeAmount: bigint, duration: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface BountyFactory extends BaseContract {
    
    connect(runner?: ContractRunner | null): BountyFactory;
    waitForDeployment(): Promise<this>;

    interface: BountyFactoryInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    createBounty: TypedContractMethod<
      [_owner: AddressLike, _cid: string, _stakeAmount: BigNumberish, _duration: BigNumberish, ],
      [string],
      'payable'
    >
    

    
    deployedBounties: TypedContractMethod<
      [arg0: BigNumberish, ],
      [string],
      'view'
    >
    

    
    getDeployedBounties: TypedContractMethod<
      [],
      [string[]],
      'view'
    >
    

    
    platformTreasury: TypedContractMethod<
      [],
      [string],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'createBounty'): TypedContractMethod<
      [_owner: AddressLike, _cid: string, _stakeAmount: BigNumberish, _duration: BigNumberish, ],
      [string],
      'payable'
    >;
getFunction(nameOrSignature: 'deployedBounties'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'getDeployedBounties'): TypedContractMethod<
      [],
      [string[]],
      'view'
    >;
getFunction(nameOrSignature: 'platformTreasury'): TypedContractMethod<
      [],
      [string],
      'view'
    >;

    getEvent(key: 'BountyCreated'): TypedContractEvent<BountyCreatedEvent.InputTuple, BountyCreatedEvent.OutputTuple, BountyCreatedEvent.OutputObject>;

    filters: {
      
      'BountyCreated(address,address,string,uint256,uint256,uint256)': TypedContractEvent<BountyCreatedEvent.InputTuple, BountyCreatedEvent.OutputTuple, BountyCreatedEvent.OutputObject>;
      BountyCreated: TypedContractEvent<BountyCreatedEvent.InputTuple, BountyCreatedEvent.OutputTuple, BountyCreatedEvent.OutputObject>;
    
    };
  }