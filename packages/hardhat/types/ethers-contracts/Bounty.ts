/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  

  export interface BountyInterface extends Interface {
    getFunction(nameOrSignature: "acceptSubmission" | "amount" | "cid" | "close" | "closeIfExpired" | "endTime" | "getSubmission" | "getSubmitters" | "owner" | "platformTreasury" | "rejectSubmission" | "stakeAmount" | "status" | "submitReport"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "BountyClosed" | "FundsReleased" | "ReportSubmitted" | "StakeDeposited" | "StakeRefunded" | "StakeSlashed" | "SubmissionAccepted" | "SubmissionRejected"): EventFragment;

    encodeFunctionData(functionFragment: 'acceptSubmission', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'amount', values?: undefined): string;
encodeFunctionData(functionFragment: 'cid', values?: undefined): string;
encodeFunctionData(functionFragment: 'close', values?: undefined): string;
encodeFunctionData(functionFragment: 'closeIfExpired', values?: undefined): string;
encodeFunctionData(functionFragment: 'endTime', values?: undefined): string;
encodeFunctionData(functionFragment: 'getSubmission', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getSubmitters', values?: undefined): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'platformTreasury', values?: undefined): string;
encodeFunctionData(functionFragment: 'rejectSubmission', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'stakeAmount', values?: undefined): string;
encodeFunctionData(functionFragment: 'status', values?: undefined): string;
encodeFunctionData(functionFragment: 'submitReport', values: [string]): string;

    decodeFunctionResult(functionFragment: 'acceptSubmission', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'amount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'cid', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'close', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'closeIfExpired', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'endTime', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getSubmission', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getSubmitters', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'platformTreasury', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'rejectSubmission', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'stakeAmount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'status', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'submitReport', data: BytesLike): Result;
  }

  
    export namespace BountyClosedEvent {
      export type InputTuple = [winners: BigNumberish, totalPaid: BigNumberish];
      export type OutputTuple = [winners: bigint, totalPaid: bigint];
      export interface OutputObject {winners: bigint, totalPaid: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace FundsReleasedEvent {
      export type InputTuple = [researcher: AddressLike, amount: BigNumberish];
      export type OutputTuple = [researcher: string, amount: bigint];
      export interface OutputObject {researcher: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ReportSubmittedEvent {
      export type InputTuple = [researcher: AddressLike, reportCid: string];
      export type OutputTuple = [researcher: string, reportCid: string];
      export interface OutputObject {researcher: string, reportCid: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace StakeDepositedEvent {
      export type InputTuple = [researcher: AddressLike, amount: BigNumberish];
      export type OutputTuple = [researcher: string, amount: bigint];
      export interface OutputObject {researcher: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace StakeRefundedEvent {
      export type InputTuple = [researcher: AddressLike, amount: BigNumberish];
      export type OutputTuple = [researcher: string, amount: bigint];
      export interface OutputObject {researcher: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace StakeSlashedEvent {
      export type InputTuple = [researcher: AddressLike, amount: BigNumberish, receiver: AddressLike];
      export type OutputTuple = [researcher: string, amount: bigint, receiver: string];
      export interface OutputObject {researcher: string, amount: bigint, receiver: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace SubmissionAcceptedEvent {
      export type InputTuple = [researcher: AddressLike];
      export type OutputTuple = [researcher: string];
      export interface OutputObject {researcher: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace SubmissionRejectedEvent {
      export type InputTuple = [researcher: AddressLike];
      export type OutputTuple = [researcher: string];
      export interface OutputObject {researcher: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface Bounty extends BaseContract {
    
    connect(runner?: ContractRunner | null): Bounty;
    waitForDeployment(): Promise<this>;

    interface: BountyInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    acceptSubmission: TypedContractMethod<
      [_researcher: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    amount: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    cid: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    close: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    closeIfExpired: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    endTime: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    getSubmission: TypedContractMethod<
      [_researcher: AddressLike, ],
      [[string, bigint, bigint]],
      'view'
    >
    

    
    getSubmitters: TypedContractMethod<
      [],
      [string[]],
      'view'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    platformTreasury: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    rejectSubmission: TypedContractMethod<
      [_researcher: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    stakeAmount: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    status: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    submitReport: TypedContractMethod<
      [_reportCid: string, ],
      [void],
      'payable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'acceptSubmission'): TypedContractMethod<
      [_researcher: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'amount'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'cid'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'close'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'closeIfExpired'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'endTime'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getSubmission'): TypedContractMethod<
      [_researcher: AddressLike, ],
      [[string, bigint, bigint]],
      'view'
    >;
getFunction(nameOrSignature: 'getSubmitters'): TypedContractMethod<
      [],
      [string[]],
      'view'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'platformTreasury'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'rejectSubmission'): TypedContractMethod<
      [_researcher: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'stakeAmount'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'status'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'submitReport'): TypedContractMethod<
      [_reportCid: string, ],
      [void],
      'payable'
    >;

    getEvent(key: 'BountyClosed'): TypedContractEvent<BountyClosedEvent.InputTuple, BountyClosedEvent.OutputTuple, BountyClosedEvent.OutputObject>;
getEvent(key: 'FundsReleased'): TypedContractEvent<FundsReleasedEvent.InputTuple, FundsReleasedEvent.OutputTuple, FundsReleasedEvent.OutputObject>;
getEvent(key: 'ReportSubmitted'): TypedContractEvent<ReportSubmittedEvent.InputTuple, ReportSubmittedEvent.OutputTuple, ReportSubmittedEvent.OutputObject>;
getEvent(key: 'StakeDeposited'): TypedContractEvent<StakeDepositedEvent.InputTuple, StakeDepositedEvent.OutputTuple, StakeDepositedEvent.OutputObject>;
getEvent(key: 'StakeRefunded'): TypedContractEvent<StakeRefundedEvent.InputTuple, StakeRefundedEvent.OutputTuple, StakeRefundedEvent.OutputObject>;
getEvent(key: 'StakeSlashed'): TypedContractEvent<StakeSlashedEvent.InputTuple, StakeSlashedEvent.OutputTuple, StakeSlashedEvent.OutputObject>;
getEvent(key: 'SubmissionAccepted'): TypedContractEvent<SubmissionAcceptedEvent.InputTuple, SubmissionAcceptedEvent.OutputTuple, SubmissionAcceptedEvent.OutputObject>;
getEvent(key: 'SubmissionRejected'): TypedContractEvent<SubmissionRejectedEvent.InputTuple, SubmissionRejectedEvent.OutputTuple, SubmissionRejectedEvent.OutputObject>;

    filters: {
      
      'BountyClosed(uint256,uint256)': TypedContractEvent<BountyClosedEvent.InputTuple, BountyClosedEvent.OutputTuple, BountyClosedEvent.OutputObject>;
      BountyClosed: TypedContractEvent<BountyClosedEvent.InputTuple, BountyClosedEvent.OutputTuple, BountyClosedEvent.OutputObject>;
    

      'FundsReleased(address,uint256)': TypedContractEvent<FundsReleasedEvent.InputTuple, FundsReleasedEvent.OutputTuple, FundsReleasedEvent.OutputObject>;
      FundsReleased: TypedContractEvent<FundsReleasedEvent.InputTuple, FundsReleasedEvent.OutputTuple, FundsReleasedEvent.OutputObject>;
    

      'ReportSubmitted(address,string)': TypedContractEvent<ReportSubmittedEvent.InputTuple, ReportSubmittedEvent.OutputTuple, ReportSubmittedEvent.OutputObject>;
      ReportSubmitted: TypedContractEvent<ReportSubmittedEvent.InputTuple, ReportSubmittedEvent.OutputTuple, ReportSubmittedEvent.OutputObject>;
    

      'StakeDeposited(address,uint256)': TypedContractEvent<StakeDepositedEvent.InputTuple, StakeDepositedEvent.OutputTuple, StakeDepositedEvent.OutputObject>;
      StakeDeposited: TypedContractEvent<StakeDepositedEvent.InputTuple, StakeDepositedEvent.OutputTuple, StakeDepositedEvent.OutputObject>;
    

      'StakeRefunded(address,uint256)': TypedContractEvent<StakeRefundedEvent.InputTuple, StakeRefundedEvent.OutputTuple, StakeRefundedEvent.OutputObject>;
      StakeRefunded: TypedContractEvent<StakeRefundedEvent.InputTuple, StakeRefundedEvent.OutputTuple, StakeRefundedEvent.OutputObject>;
    

      'StakeSlashed(address,uint256,address)': TypedContractEvent<StakeSlashedEvent.InputTuple, StakeSlashedEvent.OutputTuple, StakeSlashedEvent.OutputObject>;
      StakeSlashed: TypedContractEvent<StakeSlashedEvent.InputTuple, StakeSlashedEvent.OutputTuple, StakeSlashedEvent.OutputObject>;
    

      'SubmissionAccepted(address)': TypedContractEvent<SubmissionAcceptedEvent.InputTuple, SubmissionAcceptedEvent.OutputTuple, SubmissionAcceptedEvent.OutputObject>;
      SubmissionAccepted: TypedContractEvent<SubmissionAcceptedEvent.InputTuple, SubmissionAcceptedEvent.OutputTuple, SubmissionAcceptedEvent.OutputObject>;
    

      'SubmissionRejected(address)': TypedContractEvent<SubmissionRejectedEvent.InputTuple, SubmissionRejectedEvent.OutputTuple, SubmissionRejectedEvent.OutputObject>;
      SubmissionRejected: TypedContractEvent<SubmissionRejectedEvent.InputTuple, SubmissionRejectedEvent.OutputTuple, SubmissionRejectedEvent.OutputObject>;
    
    };
  }